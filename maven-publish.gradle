apply plugin: 'maven-publish'

group = 'io.github.data-rocks-team'
version = (project.hasProperty('releaseVersion')
        ? (project.property('releaseVersion').startsWith('v')
            ? project.property('releaseVersion').substring(1) : project.property('releaseVersion'))
        : 'local') as String

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "$project.name"
            from components.java
            pom {
                name = 'schemaregistry-junit'
                description = ('A library that provides an in-memory instance of Confluent Schema '
                        + 'Registry to run your tests against.')
                url = 'https://github.com/data-rocks-team/schemaregistry-junit'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/data-rocks-team/schemaregistry-junit/blob/main/LICENSE'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/data-rocks-team/schemaregistry-junit.git'
                    developerConnection = 'scm:git:ssh://github.com/data-rocks-team/schemaregistry-junit.git'
                    url = 'https://github.com/data-rocks-team/schemaregistry-junit'
                }
                developers {
                    developer {
                        name = 'Francesco Nobilia'
                        url = 'https://nobilia.dev/'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

// Apply signature only if needed
if (project.hasProperty('signing.gnupg.passphrase')) {
    apply plugin: 'signing'

    signing {
        useGpgCmd()
        sign publishing.publications.mavenJava
    }
}
